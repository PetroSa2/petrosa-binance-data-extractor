name: CI/CD Pipeline

# This pipeline builds and deploys the Binance data extractor to Kubernetes
# Includes:
# - Regular klines extraction CronJobs (all timeframes: m5, m15, m30, h1, d1)
# - Gap filler CronJob (daily at 2 AM UTC with enhanced retry logic)
# - Security scanning and testing
# - Multi-architecture Docker builds

on:
  push:
    branches: [ 'main', 'develop' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ 'main' ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/petrosa-binance-extractor

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking
      run: |
        mypy . --ignore-missing-imports
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
    
    - name: Check coverage report
      run: |
        echo "📊 Coverage Report Summary:"
        echo "=========================="
        
        # Generate and display coverage report
        coverage report --show-missing --skip-covered
        
        # Get coverage percentage
        COVERAGE_PERCENT=$(coverage report --format=total)
        echo ""
        echo "📈 Total Coverage: ${COVERAGE_PERCENT}%"
        
        # Set coverage threshold (adjust as needed)
        COVERAGE_THRESHOLD=80
        
        if (( $(echo "$COVERAGE_PERCENT >= $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "✅ Coverage meets threshold of ${COVERAGE_THRESHOLD}%"
        else
          echo "⚠️  Coverage below threshold of ${COVERAGE_THRESHOLD}%"
          echo "❌ Current: ${COVERAGE_PERCENT}%, Required: ${COVERAGE_THRESHOLD}%"
          # Uncomment the next line to fail the build on low coverage
          # exit 1
        fi
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: PetroSa2/petrosa-binance-data-extractor

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'

  build-and-push:
    needs: [lint-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # For tags, use the tag name (e.g., v1.0.0)
          VERSION="${{ github.ref_name }}"
        else
          # For main branch, increment version automatically
          # Get the latest version from git tags
          LATEST_VERSION=$(git tag --sort=-version:refname | grep '^v[0-9]' | head -1)
          
          if [ -z "$LATEST_VERSION" ]; then
            # No version tags found, start with v1
            VERSION="v1"
          else
            # Extract the number and increment
            VERSION_NUM=$(echo "$LATEST_VERSION" | sed 's/^v//')
            NEW_VERSION_NUM=$((VERSION_NUM + 1))
            VERSION="v${NEW_VERSION_NUM}"
          fi
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/petrosa-binance-extractor
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          COMMIT_SHA=${{ github.sha }}
          BUILD_DATE=${{ steps.meta.outputs.date }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl for MicroK8s
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
        # Verify connection to MicroK8s cluster (skip TLS verification)
        kubectl cluster-info --insecure-skip-tls-verify
        kubectl get nodes --insecure-skip-tls-verify
    
    - name: Update image tags in manifests
      run: |
        # Use the version generated in the build step
        IMAGE_TAG="${{ needs.build-and-push.outputs.version }}"
        
        echo "Using image tag: ${IMAGE_TAG}"
        
        # Update the image tag in Kubernetes manifests
        find k8s/ -name "*.yaml" -o -name "*.yml" | xargs sed -i "s|image: .*/petrosa-binance-extractor:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/petrosa-binance-extractor:${IMAGE_TAG}|g"
        
        echo "Updated manifests with image: ${{ secrets.DOCKERHUB_USERNAME }}/petrosa-binance-extractor:${IMAGE_TAG}"
    
    - name: Deploy secrets (if not exists)
      run: |
        # Check if secrets exist, create them if they don't
        if ! kubectl get secret binance-api-secret -n petrosa-apps --insecure-skip-tls-verify >/dev/null 2>&1; then
          echo "⚠️ binance-api-secret not found. Creating with CI secrets..."
          kubectl create secret generic binance-api-secret -n petrosa-apps \
            --from-literal=api-key="${{ secrets.BINANCE_API_KEY }}" \
            --from-literal=api-secret="${{ secrets.BINANCE_SECRET_KEY }}" \
            --insecure-skip-tls-verify
        else
          echo "✅ binance-api-secret already exists"
        fi
        
        if ! kubectl get secret database-secret -n petrosa-apps --insecure-skip-tls-verify >/dev/null 2>&1; then
          echo "⚠️ database-secret not found. Creating with CI secrets..."
          kubectl create secret generic database-secret -n petrosa-apps \
            --from-literal=mysql-uri="${{ secrets.POSTGRES_CONNECTION_STRING }}" \
            --insecure-skip-tls-verify
        else
          echo "✅ database-secret already exists"
        fi
    
    - name: Apply Kubernetes manifests
      run: |
        echo "🚀 Deploying to MicroK8s cluster..."
        
        # Apply all Kubernetes manifests
        kubectl apply -f k8s/ --recursive --insecure-skip-tls-verify
        
        echo "📊 Deployment status:"
        kubectl get all -l app=binance-extractor -n petrosa-apps --insecure-skip-tls-verify || echo "No resources with app=binance-extractor label found"
        kubectl get cronjobs -n petrosa-apps --insecure-skip-tls-verify || echo "No CronJobs found"
        kubectl get jobs --sort-by=.metadata.creationTimestamp -n petrosa-apps --insecure-skip-tls-verify | tail -5 || echo "No Jobs found"
        
        # Verify specific deployments
        echo "🔍 Verifying specific deployments:"
        echo "  - Regular klines extraction CronJobs"
        echo "  - Gap filler CronJob"
        
        # Check for gap filler CronJob specifically
        if kubectl get cronjob klines-gap-filler -n petrosa-apps --insecure-skip-tls-verify >/dev/null 2>&1; then
          echo "✅ Gap filler CronJob deployed successfully"
          echo "📅 Gap filler schedule:"
          kubectl get cronjob klines-gap-filler -n petrosa-apps -o jsonpath='{.spec.schedule}' --insecure-skip-tls-verify
          echo ""
        else
          echo "⚠️ Gap filler CronJob not found - check deployment"
        fi
    
    - name: Verify deployment
      run: |
        echo "✅ Verifying deployment on MicroK8s..."
        
        # Wait for deployments to be ready (if any)
        kubectl wait --for=condition=available --timeout=300s deployment -l app=binance-extractor -n petrosa-apps --insecure-skip-tls-verify 2>/dev/null || echo "No deployments to wait for"
        
        # Show CronJob status
        echo "📅 CronJob status:"
        kubectl get cronjobs -n petrosa-apps -o wide --insecure-skip-tls-verify || echo "No CronJobs found"
        
        # Show specific gap filler CronJob details
        echo "🔧 Gap filler CronJob details:"
        kubectl describe cronjob klines-gap-filler -n petrosa-apps --insecure-skip-tls-verify 2>/dev/null || echo "Gap filler CronJob not found"
        
        # Verify gap filler resource configuration
        echo "📊 Gap filler resource configuration:"
        kubectl get cronjob klines-gap-filler -n petrosa-apps -o jsonpath='{.spec.jobTemplate.spec.template.spec.containers[0].resources}' --insecure-skip-tls-verify 2>/dev/null || echo "Resource configuration not found"
        echo ""
        
        # Show recent pods
        echo "📦 Recent pods:"
        kubectl get pods --sort-by=.metadata.creationTimestamp -n petrosa-apps --insecure-skip-tls-verify | tail -10 || echo "No pods found"
        
        # Show logs from the most recent pod (if any)
        echo "📝 Recent logs (if available):"
        LATEST_POD=$(kubectl get pods --sort-by=.metadata.creationTimestamp -n petrosa-apps -o jsonpath='{.items[-1].metadata.name}' --insecure-skip-tls-verify 2>/dev/null || echo "")
        if [ ! -z "$LATEST_POD" ] && [ "$LATEST_POD" != "null" ]; then
          echo "Logs from pod: $LATEST_POD"
          kubectl logs $LATEST_POD --tail=20 -n petrosa-apps --insecure-skip-tls-verify || echo "No logs available yet"
        else
          echo "No recent pods found (normal for CronJobs that haven't run yet)"
        fi
    
    - name: Deployment summary
      run: |
        echo "🎉 Deployment to MicroK8s completed successfully!"
        echo ""
        echo "📋 What was deployed:"
        echo "  ✅ Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/petrosa-binance-extractor:${IMAGE_TAG}"
        echo "  ✅ Kubernetes manifests applied to MicroK8s cluster"
        echo "  ✅ Regular klines extraction CronJobs (all timeframes)"
        echo "  ✅ Gap filler CronJob (daily at 2 AM UTC)"
        echo "  ✅ Secrets verified/created"
        echo ""
        echo "📊 Monitor your deployment:"
        echo "  kubectl get all -l app=binance-extractor -n petrosa-apps"
        echo "  kubectl get cronjobs -n petrosa-apps"
        echo "  kubectl logs -l app=binance-extractor --tail=100 -n petrosa-apps"
        echo ""
        echo "🔧 Monitor gap filler specifically:"
        echo "  kubectl get cronjob klines-gap-filler -n petrosa-apps"
        echo "  kubectl logs -l job-name=klines-gap-filler --tail=100 -n petrosa-apps"
        echo "  kubectl describe cronjob klines-gap-filler -n petrosa-apps"
        echo ""
        echo "⚠️ Next steps:"
        echo "  1. Verify secrets are properly set in your MicroK8s cluster"
        echo "  2. Monitor CronJob executions and logs"
        echo "  3. Check that the image can pull successfully"
        echo "  4. Verify gap filler CronJob schedule (daily at 2 AM UTC)"
        echo "  5. Monitor gap filler job logs for retry behavior and success rates"

  notify:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          # Add success notification logic here
        else
          echo "❌ Deployment failed!"
          # Add failure notification logic here
        fi

  cleanup:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleaning up old Docker images..."
        # Add cleanup logic here
        # Example: Delete images older than 30 days from Docker Hub
