# Cursor AI Rules for Petrosa Binance Data Extractor

## Repository Context
This is a Kubernetes-based cryptocurrency data extraction system using a remote MicroK8s cluster.

## Key Files to Reference
- `docs/REPOSITORY_SETUP_GUIDE.md` - Complete setup and troubleshooting guide
- `docs/QUICK_REFERENCE.md` - Essential commands and common issues
- `k8s/kubeconfig.yaml` - Remote MicroK8s cluster configuration

## Prerequisites & Installation
- **MicroK8s**: Install with `sudo snap install microk8s --classic` (Linux) or `brew install microk8s` (macOS)
- **kubectl**: Install with `sudo snap install kubectl --classic` or `brew install kubectl`
- **Docker**: Required for building and running containers

## Common Issues & Solutions
When users encounter connection issues:
1. **AWS SSO errors**: This repo uses remote MicroK8s, not AWS EKS
2. **kubectl connection**: Use `export KUBECONFIG=k8s/kubeconfig.yaml`
3. **Port forwarding**: Use `kubectl --kubeconfig=k8s/kubeconfig.yaml port-forward`
4. **Certificate issues**: Add `--insecure-skip-tls-verify` flag
5. **MicroK8s not found**: Install with `sudo snap install microk8s --classic`

## Development Workflow
1. Install MicroK8s: `sudo snap install microk8s --classic`
2. Set kubeconfig: `export KUBECONFIG=k8s/kubeconfig.yaml`
3. Connect to remote MicroK8s cluster
4. Deploy to remote cluster: `./scripts/deploy-local.sh`
5. Port forward services as needed

## Always Reference
- Check `docs/REPOSITORY_SETUP_GUIDE.md` for detailed setup instructions
- Check `docs/QUICK_REFERENCE.md` for common commands and troubleshooting
- Use `k8s/kubeconfig.yaml` for remote cluster connection
- This is a remote MicroK8s setup, not AWS EKS
- You do NOT need to install MicroK8s locally to use this repo. Only install MicroK8s if you want to run a local cluster for testing. For normal use, just install kubectl and use the provided kubeconfig to connect to the remote cluster.

## Kubernetes Secrets & ConfigMaps
- **ALWAYS use the existing Kubernetes secret `petrosa-sensitive-credentials` for credentials**
- **ALWAYS use the existing configmap `petrosa-common-config` for configuration**
- **NEVER create new secrets/configmaps or change their names**

## GitHub CLI Commands
- **When running `gh` commands, always dump output to a file in `/tmp` and then read the file**
- **Example**: `gh api repos/owner/repo/releases > /tmp/releases.json && cat /tmp/releases.json`
- **This ensures reliable output capture and avoids CLI interaction issues** 