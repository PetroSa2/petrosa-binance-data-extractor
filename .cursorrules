# Cursor AI Rules for Petrosa Binance Data Extractor

## Repository Context
This is a Kubernetes-based cryptocurrency data extraction system using a remote MicroK8s cluster.

## Key Files to Reference
- `docs/REPOSITORY_SETUP_GUIDE.md` - Complete setup and troubleshooting guide
- `docs/QUICK_REFERENCE.md` - Essential commands and common issues
- `k8s/kubeconfig.yaml` - Remote MicroK8s cluster configuration

## Prerequisites & Installation
- **Python**: 3.8+ required
- **kubectl**: Install with `sudo snap install kubectl --classic` or `brew install kubectl`
- **Docker**: Required for building and running containers
- **MicroK8s**: Only needed for local testing - install with `sudo snap install microk8s --classic` (Linux) or `brew install microk8s` (macOS)

## Development Workflow
1. Set kubeconfig: `export KUBECONFIG=k8s/kubeconfig.yaml`
2. Connect to remote MicroK8s cluster
3. Deploy to remote cluster: `./scripts/deploy-local.sh`
4. Port forward services as needed

## Common Issues & Solutions
When users encounter connection issues:
1. **AWS SSO errors**: This repo uses remote MicroK8s, not AWS EKS
2. **kubectl connection**: Use `export KUBECONFIG=k8s/kubeconfig.yaml`
3. **Port forwarding**: Use `kubectl --kubeconfig=k8s/kubeconfig.yaml port-forward`
4. **Certificate issues**: Add `--insecure-skip-tls-verify` flag
5. **MicroK8s not found**: Install with `sudo snap install microk8s --classic`

## Kubernetes Configuration Rules
- **ALWAYS use the existing Kubernetes secret `petrosa-sensitive-credentials` for credentials**
- **ALWAYS use the existing configmap `petrosa-common-config` for configuration**
- **NEVER create new secrets/configmaps or change their names**

## GitHub CLI Commands
- **When running `gh` commands, always dump output to a file in `/tmp` and then read the file**
- **Example**: `gh api repos/owner/repo/releases > /tmp/releases.json && cat /tmp/releases.json`
- **This ensures reliable output capture and avoids CLI interaction issues**

## CI/CD Pipeline Fix Process
- **WHEN FIXING PIPELINE ISSUES: Continue until CI/CD on GitHub Actions is working**
- **Process**: 
  1. Run all tests locally first: `python -m pytest tests/ -v --cov=. --cov-report=term --tb=short`
  2. Fix any local test failures
  3. Fix linting errors: `flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics`
  4. Commit and push changes to a feature branch
  5. Create PR to trigger CI/CD pipeline
  6. Monitor pipeline status: `gh run list --json status,conclusion,url,createdAt`
  7. If pipeline fails, fix issues and repeat steps 1-6
  8. **STOP ONLY WHEN CI/CD GHA PIPELINE IS WORKING**
- **Never merge to main until pipeline passes**
- **Always use file-based approach for GitHub CLI: `gh command > /tmp/file.json && cat /tmp/file.json`**

## Code Style & Error Handling
- Follow PEP 8 for Python code formatting
- Use type hints where possible
- Implement proper error handling with try/catch blocks
- Add logging for debugging and monitoring
- Use descriptive variable and function names

## CRITICAL: ALWAYS FOLLOW THESE RULES
- **BEFORE making any changes**: Check `docs/REPOSITORY_SETUP_GUIDE.md` and `docs/QUICK_REFERENCE.md`
- **WHEN suggesting kubectl commands**: Always include `--kubeconfig=k8s/kubeconfig.yaml`
- **WHEN dealing with credentials**: ONLY use existing secret `petrosa-sensitive-credentials`
- **WHEN dealing with configuration**: ONLY use existing configmap `petrosa-common-config`
- **WHEN running GitHub CLI**: ALWAYS use file-based approach: `gh command > /tmp/file.json && cat /tmp/file.json`
- **WHEN fixing CI/CD issues**: Continue until GitHub Actions pipeline passes
- **WHEN writing Python code**: Follow PEP 8, use type hints, add proper error handling
- **NEVER suggest AWS EKS commands** - this is a MicroK8s setup
- **NEVER create new Kubernetes secrets/configmaps** - use existing ones only

## AUTOMATED DOCUMENTATION CHECK
- **BEFORE responding to ANY request**: Automatically read and reference `docs/REPOSITORY_SETUP_GUIDE.md` and `docs/QUICK_REFERENCE.md`
- **ALWAYS start responses by checking these files first** if the request involves:
  - Kubernetes deployment/configuration
  - Cluster connection issues
  - Development setup
  - Troubleshooting
  - CI/CD pipeline issues 