#!/bin/bash
set -e

echo "üöÄ Starting Local CI/CD Pipeline Simulation"
echo "============================================="
echo "Date: $(date)"
echo "Working Directory: $(pwd)"
echo "Python Version: $(/Users/yurisa2/petrosa/petrosa-binance-data-extractor/.venv/bin/python --version)"
echo "============================================="

# Step 1: Install dependencies
echo ""
echo "üì¶ Step 1: Installing Dependencies"
echo "-----------------------------------"
/Users/yurisa2/petrosa/petrosa-binance-data-extractor/.venv/bin/python -m pip install --upgrade pip
/Users/yurisa2/petrosa/petrosa-binance-data-extractor/.venv/bin/pip install -r requirements.txt
/Users/yurisa2/petrosa/petrosa-binance-data-extractor/.venv/bin/pip install -r requirements-dev.txt
echo "‚úÖ Dependencies installed successfully"

# Step 2: Run linting
echo ""
echo "üîç Step 2: Running Code Linting"
echo "--------------------------------"
echo "Running critical errors check..."
/Users/yurisa2/petrosa/petrosa-binance-data-extractor/.venv/bin/python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv,htmlcov,__pycache__,.git
echo "‚úÖ Critical errors check passed"

echo "Running style check..."
/Users/yurisa2/petrosa/petrosa-binance-data-extractor/.venv/bin/python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=.venv,htmlcov,__pycache__,.git
echo "‚úÖ Style check completed"

# Step 3: Run type checking
echo ""
echo "üîç Step 3: Running Type Checking"
echo "---------------------------------"
/Users/yurisa2/petrosa/petrosa-binance-data-extractor/.venv/bin/python -m mypy . --ignore-missing-imports
echo "‚úÖ Type checking passed"

# Step 4: Run tests
echo ""
echo "üß™ Step 4: Running Unit Tests"
echo "------------------------------"
/Users/yurisa2/petrosa/petrosa-binance-data-extractor/.venv/bin/python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
echo "‚úÖ Unit tests completed"

# Step 5: Check coverage
echo ""
echo "üìä Step 5: Coverage Analysis"
echo "-----------------------------"
echo "üìä Coverage Report Summary:"
echo "=========================="

# Generate and display coverage report
/Users/yurisa2/petrosa/petrosa-binance-data-extractor/.venv/bin/python -m coverage report --show-missing --skip-covered

# Get coverage percentage
COVERAGE_PERCENT=$(/Users/yurisa2/petrosa/petrosa-binance-data-extractor/.venv/bin/python -m coverage report --format=total)
echo ""
echo "üìà Total Coverage: ${COVERAGE_PERCENT}%"

# Set coverage threshold (adjust as needed)
COVERAGE_THRESHOLD=80

if (( COVERAGE_PERCENT >= COVERAGE_THRESHOLD )); then
  echo "‚úÖ Coverage meets threshold of ${COVERAGE_THRESHOLD}%"
  COVERAGE_STATUS="PASS"
else
  echo "‚ö†Ô∏è  Coverage below threshold of ${COVERAGE_THRESHOLD}%"
  echo "‚ùå Current: ${COVERAGE_PERCENT}%, Required: ${COVERAGE_THRESHOLD}%"
  COVERAGE_STATUS="WARNING"
fi

# Step 6: Run OpenTelemetry Integration Tests
echo ""
echo "üîß Step 6: OpenTelemetry Integration Tests"
echo "------------------------------------------"
/Users/yurisa2/petrosa/petrosa-binance-data-extractor/.venv/bin/python docs/test_integration.py
echo "‚úÖ OpenTelemetry integration tests passed"

# Final Summary
echo ""
echo "üéâ CI/CD Pipeline Summary"
echo "========================="
echo "‚úÖ Dependencies Installation: PASS"
echo "‚úÖ Code Linting: PASS"
echo "‚úÖ Type Checking: PASS"
echo "‚úÖ Unit Tests: PASS"
echo "${COVERAGE_STATUS == 'PASS' && echo '‚úÖ' || echo '‚ö†Ô∏è '} Coverage Analysis: ${COVERAGE_STATUS}"
echo "‚úÖ OpenTelemetry Integration: PASS"
echo ""
echo "üöÄ Pipeline Status: ${COVERAGE_STATUS == 'WARNING' && echo 'SUCCESS WITH WARNINGS' || echo 'SUCCESS'}"
echo "üéØ Ready for deployment!"
echo ""
echo "============================================="
echo "CI/CD Pipeline completed at: $(date)"
echo "============================================="
